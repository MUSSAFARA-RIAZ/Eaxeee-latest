import React, { useState } from "react";
import { DataGrid } from "@mui/x-data-grid";
import { connect } from "react-redux";
import { Tooltip, Box, TextField, IconButton, Stack } from "@mui/material";
import SearchIcon from "@mui/icons-material/Search";
import DeleteIcon from "@mui/icons-material/Delete";
import AutorenewIcon from "@mui/icons-material/Autorenew";

function CustomTable(props) {
  const { language: currentLang, theme } = props;
  const [searchText, setSearchText] = useState("");
  const [selectedRows, setSelectedRows] = useState([]);
  const [paginationModel, setPaginationModel] = useState({
    pageSize: 5,
    page: 0,
  });

  const handlePaginationModelChange = (newModel) => {
    setPaginationModel(newModel);
  };

  const handleSearchChange = (event) => {
    setSearchText(event.target.value);
  };

  const handleDeleteClick = () => setSelectedRows([]);

  const handleRestoreIconButton = () => setSelectedRows([]);

  const handleSelectionChange = (newSelection) => {
    setSelectedRows(newSelection);
    if (props.onSelectionChange) {
      props.onSelectionChange(newSelection);
    }
  };

  // Apply filtering based on search text
  const filteredRows = props.rows.filter((row) =>
    props.columns.some((col) => {
      const value = row[col.field];
      return (
        typeof value === "string" &&
        value.toLowerCase().includes(searchText.toLowerCase())
      );
    })
  );

  const columns = props.columns.map((col) => ({
    ...col,
    sortable: true,
  }));

  return (
    <Box
      sx={{
        height: "70vh",
        width: "100%",
        ...props.TableMainDivHeight,
      }}
    >
      {/* Search and action buttons */}
      {!props.nosearch && (
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            marginBottom: 2,
          }}
        >
          <Stack direction="row" spacing={1}>
            <TextField
              value={searchText}
              onChange={handleSearchChange}
              placeholder="Search..."
              InputProps={{
                startAdornment: <SearchIcon color="disabled" />,
              }}
              sx={{
                "& .MuiInputBase-input": {
                  height: "100%",
                  padding: "8px",
                },
              }}
            />
            {props.children}
          </Stack>

          {/* Restore and delete action buttons */}
          <Stack
            direction="row"
            spacing={1}
            sx={{ flex: 1, justifyContent: "flex-end" }}
          >
            {props.showRestoreButton && (
              <IconButton
                onClick={handleRestoreIconButton}
                disabled={selectedRows.length === 0}
              >
                <AutorenewIcon
                  style={{
                    color: selectedRows.length === 0
                      ? "#a5b7b9"
                      : theme === "default"
                      ? "#2158a4"
                      : theme === "light"
                      ? "#4A4A4A"
                      : "#a5d149",
                  }}
                />
              </IconButton>
            )}

            {props.showDeleteButton && (
              <IconButton
                onClick={handleDeleteClick}
                disabled={selectedRows.length === 0}
              >
                <Tooltip
                  title={
                    selectedRows.length === 0
                      ? "No rows selected"
                      : "Delete selected rows"
                  }
                >
                  <DeleteIcon
                    style={{
                      color: selectedRows.length === 0
                        ? "#a5b7b9"
                        : theme === "default"
                        ? "#2158a4"
                        : theme === "light"
                        ? "#4A4A4A"
                        : "#a5d149",
                    }}
                  />
                </Tooltip>
              </IconButton>
            )}
          </Stack>
        </Box>
      )}

      {/* DataGrid with pagination, filtering, and selection */}
      <Box
        sx={{
          height: "100%",
          width: "100%",
          overflowY: "auto",
          overflowX: "hidden",
          ...props.DataGridDivHeight,
        }}
      >
        <DataGrid
          rows={filteredRows}
          columns={columns}
          checkboxSelection={props.checkboxSelection}
          onRowSelectionModelChange={(newSelection) =>
            handleSelectionChange(newSelection)
          }
          pagination
          paginationModel={paginationModel}
          onPaginationModelChange={handlePaginationModelChange}
          paginationMode="client"
          pageSizeOptions={[5, 10, 25]}
          disableRowSelectionOnClick
        />
      </Box>
    </Box>
  );
}

const mapStateToProps = (state) => ({
  language: state.language,
  theme: state.theme,
});

export default connect(mapStateToProps)(CustomTable);
